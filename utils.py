# utils.py

from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from keyboards import generate_quiz_answers
from database import get_question

async def send_welcome_message(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞–∫ –ø—Ä–∏ /start).
    """
    from keyboards import main_menu_kb
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é –∏–Ω—Ç—É–∏—Ü–∏—é? –°–∞–º–æ–µ –≤—Ä–µ–º—è! –í–ø–µ—Ä–µ–¥–∏ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –Ω–∞—à–∏—Ö –∫–æ–ª–ª–µ–≥–∞—Ö, –∏ –ø–æ–≤–µ—Ä—å, 10 —Å–∞–º—ã—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤! –ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏üçÄ  \n\n"
        "P.S. –°–∞–º—ã—Ö –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∂–¥—É—Ç –ø—Ä–∏—è—Ç–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏!",
        reply_markup=main_menu_kb()
    )

async def send_question(message: Message, question_number: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Ññ question_number.
    - caption —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–∑ –ø–æ–ª—è question (–µ—Å–ª–∏ –µ—Å—Ç—å), 
      –ª–∏–±–æ "–í–æ–ø—Ä–æ—Å ‚ÑñN" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    - reply_markup = generate_quiz_answers(...)
    """
    question_data = await get_question(question_number)
    if not question_data:
        await message.answer(f"–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å ‚Ññ{question_number} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # question_data = (num, photo, correct, a1, a2, a3, question_text)
    num, photo, correct, a1, a2, a3, q_text = question_data
    if not q_text:
        q_text = f"–í–æ–ø—Ä–æ—Å ‚Ññ{question_number}"  # fallback
    
    kb = generate_quiz_answers(correct, [a1, a2, a3])

    try:
        await message.answer_photo(
            photo=FSInputFile(photo),
            caption=q_text,
            reply_markup=kb
        )
    except FileNotFoundError:
        await message.answer(
            text=f"{q_text}\n\n(–§–∞–π–ª '{photo}' –Ω–µ –Ω–∞–π–¥–µ–Ω).",
            reply_markup=kb
        )


def is_correct_answer(user_text: str, correct_text: str) -> bool:
    return user_text.strip().lower() == correct_text.strip().lower()


async def send_final_inline(message: Message, two_buttons: bool = False):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤–æ–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    await message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!",
            reply_markup=ReplyKeyboardRemove()
        )
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ inline-—Å–æ–æ–±—â–µ–Ω–∏–µ.
    –ï—Å–ª–∏ two_buttons=True, —Ç–æ [–°—Å—ã–ª–∫–∞, "–≤ –Ω–∞—á–∞–ª–æ"].
    –ò–Ω–∞—á–µ —Ç–æ–ª—å–∫–æ [–°—Å—ã–ª–∫–∞].
    """
    link_text="–°—Å—ã–ª–∫–∞"
    link="https://example.com"
    if two_buttons:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text=link_text, url=link),
                InlineKeyboardButton(text="–≤ –Ω–∞—á–∞–ª–æ", callback_data="to_main")
            ]]
        )
    else:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text=link_text, url=link)
            ]]
        )

    # –¢–µ–∫—Å—Ç –±–µ—Ä—ë–º –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –∏–ª–∏ —Å–≤–æ–π
    text = (
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã? –ù–∞–±–µ—Ä–∏—Å—å —Ç–µ—Ä–ø–µ–Ω–∏—è ‚Äî "
        "–æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ 5 –º–∞—Ä—Ç–∞! –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.\n"
        "–ò –ø–æ–º–Ω–∏, —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ ‚Äî –¥–æ–≤–µ—Ä—è—Ç—å —Å–µ–±–µ‚ù§Ô∏è"
    )

    await message.answer(text, reply_markup=kb)